{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.0", "generated_at": "2025-08-05T14:02:19.235334Z", "invocation_id": "e59c6e10-a664-4409-8c1b-1709e8848a4b", "env": {}, "project_id": "3b40dc8bb624805c486d8de24b091d4d", "user_id": "a2fc2ecc-7ef1-4b87-a4e1-42e823fcab03", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.dbt_sales_pipeline.mart_daily_sales": {"raw_sql": "with sales as (\r\n\r\n    select\r\n        date,\r\n        shop_id,\r\n        item_id,\r\n        sum(item_cnt_day) as total_item_cnt,\r\n        sum(item_price * item_cnt_day) as total_revenue\r\n\r\n    from {{ ref('stg_sales_train') }}\r\n    group by date, shop_id, item_id\r\n\r\n)\r\n\r\nselect *\r\nfrom sales", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_daily_sales"], "unique_id": "model.dbt_sales_pipeline.mart_daily_sales", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_daily_sales.sql", "original_file_path": "models/marts/mart_daily_sales.sql", "name": "mart_daily_sales", "alias": "mart_daily_sales", "checksum": {"name": "sha256", "checksum": "5445934727d78331d7b373b6032a752d26a861f7f7dfb7b22c33e91cec35820d"}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "Aggregated daily sales per shop and item", "columns": {"date": {"name": "date", "description": "Date of the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shop_id": {"name": "shop_id", "description": "Shop identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Item identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_item_cnt": {"name": "total_item_cnt", "description": "Total quantity of item sold on this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_revenue": {"name": "total_revenue", "description": "Total revenue for the item on that day", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_daily_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.9042208, "compiled_sql": "with sales as (\n\n    select\n        date,\n        shop_id,\n        item_id,\n        sum(item_cnt_day) as total_item_cnt,\n        sum(item_price * item_cnt_day) as total_revenue\n\n    from SALES_PIPELINE.RAW_staging.stg_sales_train\n    group by date, shop_id, item_id\n\n)\n\nselect *\nfrom sales", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_daily_sales"}, "model.dbt_sales_pipeline.mart_item_monthly_consistency": {"raw_sql": "WITH base_date_cte AS (\r\n    SELECT MIN(TO_DATE(date, 'DD.MM.YYYY')) AS base_date\r\n    FROM {{ ref('stg_sales_train') }}\r\n),\r\n\r\nmonthly_sales AS (\r\n    SELECT\r\n        DATE_BLOCK_NUM,\r\n        ITEM_ID,\r\n        SUM(ITEM_CNT_DAY * ITEM_PRICE) AS MONTHLY_REVENUE\r\n    FROM {{ ref('stg_sales_train') }}\r\n    GROUP BY DATE_BLOCK_NUM, ITEM_ID\r\n),\r\n\r\nitem_total_revenue AS (\r\n    SELECT\r\n        ITEM_ID,\r\n        SUM(MONTHLY_REVENUE) AS TOTAL_REVENUE\r\n    FROM monthly_sales\r\n    GROUP BY ITEM_ID\r\n),\r\n\r\nranked_items AS (\r\n    SELECT\r\n        ITEM_ID,\r\n        TOTAL_REVENUE,\r\n        RANK() OVER (ORDER BY TOTAL_REVENUE DESC) AS REVENUE_RANK\r\n    FROM item_total_revenue\r\n),\r\n\r\nfiltered_top_items AS (\r\n    SELECT ITEM_ID\r\n    FROM ranked_items\r\n    WHERE REVENUE_RANK <= 30\r\n),\r\n\r\nfinal_matrix AS (\r\n    SELECT\r\n        m.DATE_BLOCK_NUM,\r\n        m.ITEM_ID,\r\n        i.ITEM_NAME,\r\n        m.MONTHLY_REVENUE,\r\n        TO_CHAR(DATEADD(month, m.DATE_BLOCK_NUM, b.base_date), 'Mon YYYY') AS MONTH_LABEL,\r\n        DATEADD(month, m.DATE_BLOCK_NUM, b.base_date) AS MONTH_DATE\r\n    FROM monthly_sales m\r\n    JOIN filtered_top_items t ON m.ITEM_ID = t.ITEM_ID\r\n    LEFT JOIN {{ ref('stg_items') }} i ON m.ITEM_ID = i.ITEM_ID\r\n    CROSS JOIN base_date_cte b\r\n)\r\n\r\nSELECT *\r\nFROM final_matrix", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_items"]}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_item_monthly_consistency"], "unique_id": "model.dbt_sales_pipeline.mart_item_monthly_consistency", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_item_monthly_consistency.sql", "original_file_path": "models/marts/mart_item_monthly_consistency.sql", "name": "mart_item_monthly_consistency", "alias": "mart_item_monthly_consistency", "checksum": {"name": "sha256", "checksum": "9fd7419525f51c9ba6308d804fd00855c986d4dfb97c4fa4fdba3dc333894c50"}, "tags": [], "refs": [["stg_sales_train"], ["stg_sales_train"], ["stg_items"]], "sources": [], "description": "Monthly revenue trends for top items with consistency insight", "columns": {"DATE_BLOCK_NUM": {"name": "DATE_BLOCK_NUM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_ID": {"name": "ITEM_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTHLY_REVENUE": {"name": "MONTHLY_REVENUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_LABEL": {"name": "MONTH_LABEL", "description": "Human-readable month label (e.g. Jan 2013)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_DATE": {"name": "MONTH_DATE", "description": "Date object version of the month label", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_item_monthly_consistency.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.9129543, "compiled_sql": "WITH base_date_cte AS (\n    SELECT MIN(TO_DATE(date, 'DD.MM.YYYY')) AS base_date\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train\n),\n\nmonthly_sales AS (\n    SELECT\n        DATE_BLOCK_NUM,\n        ITEM_ID,\n        SUM(ITEM_CNT_DAY * ITEM_PRICE) AS MONTHLY_REVENUE\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train\n    GROUP BY DATE_BLOCK_NUM, ITEM_ID\n),\n\nitem_total_revenue AS (\n    SELECT\n        ITEM_ID,\n        SUM(MONTHLY_REVENUE) AS TOTAL_REVENUE\n    FROM monthly_sales\n    GROUP BY ITEM_ID\n),\n\nranked_items AS (\n    SELECT\n        ITEM_ID,\n        TOTAL_REVENUE,\n        RANK() OVER (ORDER BY TOTAL_REVENUE DESC) AS REVENUE_RANK\n    FROM item_total_revenue\n),\n\nfiltered_top_items AS (\n    SELECT ITEM_ID\n    FROM ranked_items\n    WHERE REVENUE_RANK <= 30\n),\n\nfinal_matrix AS (\n    SELECT\n        m.DATE_BLOCK_NUM,\n        m.ITEM_ID,\n        i.ITEM_NAME,\n        m.MONTHLY_REVENUE,\n        TO_CHAR(DATEADD(month, m.DATE_BLOCK_NUM, b.base_date), 'Mon YYYY') AS MONTH_LABEL,\n        DATEADD(month, m.DATE_BLOCK_NUM, b.base_date) AS MONTH_DATE\n    FROM monthly_sales m\n    JOIN filtered_top_items t ON m.ITEM_ID = t.ITEM_ID\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_items i ON m.ITEM_ID = i.ITEM_ID\n    CROSS JOIN base_date_cte b\n)\n\nSELECT *\nFROM final_matrix", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_item_monthly_consistency"}, "model.dbt_sales_pipeline.mart_monthly_sales": {"raw_sql": "WITH base_date_cte AS (\r\n    SELECT MIN(TO_DATE(DATE, 'DD.MM.YYYY')) AS base_date\r\n    FROM SALES_PIPELINE.STAGING_STAGING.stg_sales_train\r\n), base AS (\r\n    SELECT\r\n        s.date_block_num,\r\n        TO_CHAR(DATEADD(month, s.date_block_num, b.base_date), 'YYYY-MM') AS date_month,\r\n        s.shop_id,\r\n        s.item_id,\r\n        SUM(s.item_cnt_day * s.item_price) AS monthly_revenue,\r\n        SUM(s.item_cnt_day) AS monthly_qty_sold\r\n    FROM SALES_PIPELINE.STAGING_STAGING.stg_sales_train s\r\n    CROSS JOIN base_date_cte b\r\n    GROUP BY s.date_block_num, s.shop_id, s.item_id, b.base_date\r\n)\r\n\r\nSELECT *\r\nFROM base\r\nORDER BY date_block_num, shop_id, item_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_monthly_sales"], "unique_id": "model.dbt_sales_pipeline.mart_monthly_sales", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_monthly_sales.sql", "original_file_path": "models/marts/mart_monthly_sales.sql", "name": "mart_monthly_sales", "alias": "mart_monthly_sales", "checksum": {"name": "sha256", "checksum": "8a7090b192561c9a62bdbfa7d7bc4dfc643d198b85a4b324317e8aee412ee7ff"}, "tags": [], "refs": [], "sources": [], "description": "Monthly revenue and quantity sold by shop/item", "columns": {"date_block_num": {"name": "date_block_num", "description": "Month index (0 = Jan 2013, 33 = Oct 2015)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shop_id": {"name": "shop_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_revenue": {"name": "monthly_revenue", "description": "Total revenue for the item/shop/month", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_qty_sold": {"name": "monthly_qty_sold", "description": "Total quantity sold", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_monthly_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.9057918, "compiled_sql": "WITH base_date_cte AS (\r\n    SELECT MIN(TO_DATE(DATE, 'DD.MM.YYYY')) AS base_date\r\n    FROM SALES_PIPELINE.STAGING_STAGING.stg_sales_train\r\n), base AS (\r\n    SELECT\r\n        s.date_block_num,\r\n        TO_CHAR(DATEADD(month, s.date_block_num, b.base_date), 'YYYY-MM') AS date_month,\r\n        s.shop_id,\r\n        s.item_id,\r\n        SUM(s.item_cnt_day * s.item_price) AS monthly_revenue,\r\n        SUM(s.item_cnt_day) AS monthly_qty_sold\r\n    FROM SALES_PIPELINE.STAGING_STAGING.stg_sales_train s\r\n    CROSS JOIN base_date_cte b\r\n    GROUP BY s.date_block_num, s.shop_id, s.item_id, b.base_date\r\n)\r\n\r\nSELECT *\r\nFROM base\r\nORDER BY date_block_num, shop_id, item_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_monthly_sales"}, "model.dbt_sales_pipeline.mart_revenue_by_month": {"raw_sql": "WITH base_date_cte AS (\r\n    SELECT MIN(TO_DATE(DATE, 'DD.MM.YYYY')) AS base_date\r\n    FROM SALES_PIPELINE.STAGING_STAGING.stg_sales_train\r\n), sales_data AS (\r\n    SELECT\r\n        s.date_block_num,\r\n        TO_CHAR(DATEADD(month, s.date_block_num, b.base_date), 'YYYY-MM') AS date_month,\r\n        SUM(s.item_cnt_day * s.item_price) AS monthly_revenue\r\n    FROM {{ ref('stg_sales_train') }} s\r\n    CROSS JOIN base_date_cte b\r\n    GROUP BY s.date_block_num, b.base_date\r\n)\r\n\r\nSELECT\r\n    date_block_num,\r\n    date_month,\r\n    monthly_revenue\r\nFROM sales_data\r\nORDER BY date_block_num", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_revenue_by_month"], "unique_id": "model.dbt_sales_pipeline.mart_revenue_by_month", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_revenue_by_month.sql", "original_file_path": "models/marts/mart_revenue_by_month.sql", "name": "mart_revenue_by_month", "alias": "mart_revenue_by_month", "checksum": {"name": "sha256", "checksum": "6bf75f77693788e57e9f452b02434a0e7e25091de35b7b69826765a7700c4d2c"}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "Monthly revenue over time", "columns": {"date_block_num": {"name": "date_block_num", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_revenue": {"name": "monthly_revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_revenue_by_month.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.9072948, "compiled_sql": "WITH base_date_cte AS (\n    SELECT MIN(TO_DATE(DATE, 'DD.MM.YYYY')) AS base_date\n    FROM SALES_PIPELINE.STAGING_STAGING.stg_sales_train\n), sales_data AS (\n    SELECT\n        s.date_block_num,\n        TO_CHAR(DATEADD(month, s.date_block_num, b.base_date), 'YYYY-MM') AS date_month,\n        SUM(s.item_cnt_day * s.item_price) AS monthly_revenue\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train s\n    CROSS JOIN base_date_cte b\n    GROUP BY s.date_block_num, b.base_date\n)\n\nSELECT\n    date_block_num,\n    date_month,\n    monthly_revenue\nFROM sales_data\nORDER BY date_block_num", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_revenue_by_month"}, "model.dbt_sales_pipeline.mart_revenue_by_store": {"raw_sql": "SELECT \n  shop_id,\n  SUM(item_price * item_cnt_day) AS total_revenue\nFROM RAW.sales_train\nGROUP BY shop_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_revenue_by_store"], "unique_id": "model.dbt_sales_pipeline.mart_revenue_by_store", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_revenue_by_store.sql", "original_file_path": "models/marts/mart_revenue_by_store.sql", "name": "mart_revenue_by_store", "alias": "mart_revenue_by_store", "checksum": {"name": "sha256", "checksum": "176b46c834776e3a5d339763a85f3f9b8cede8b86d66ba6372608b1684c64be2"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_revenue_by_store.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.8218148, "compiled_sql": "SELECT \n  shop_id,\n  SUM(item_price * item_cnt_day) AS total_revenue\nFROM RAW.sales_train\nGROUP BY shop_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_revenue_by_store"}, "model.dbt_sales_pipeline.mart_seasonality_by_category": {"raw_sql": "WITH base_date_cte AS (\r\n    SELECT MIN(TO_DATE(date, 'DD.MM.YYYY')) AS base_date\r\n    FROM {{ ref('stg_sales_train') }}\r\n),\r\n\r\nmonthly_sales_with_category AS (\r\n    SELECT\r\n        m.date_block_num,\r\n        i.item_category_id,\r\n        c.item_category_name,\r\n        DATEADD(month, m.date_block_num, b.base_date) AS date_month,\r\n        SUM(m.monthly_revenue) AS monthly_revenue\r\n    FROM {{ ref('mart_monthly_sales') }} m\r\n    LEFT JOIN {{ ref('stg_items') }} i ON m.item_id = i.item_id\r\n    LEFT JOIN {{ ref('stg_item_categories') }} c ON i.item_category_id = c.item_category_id\r\n    CROSS JOIN base_date_cte b\r\n    GROUP BY 1, 2, 3, 4\r\n),\r\n\r\nmonthly_revenue AS (\r\n    SELECT\r\n        item_category_id,\r\n        item_category_name,\r\n        TO_CHAR(date_month, 'Mon') AS month_label,\r\n        EXTRACT(MONTH FROM date_month) AS month_num,\r\n        SUM(monthly_revenue) AS revenue\r\n    FROM monthly_sales_with_category\r\n    GROUP BY 1, 2, 3, 4\r\n),\r\n\r\ncategory_avg AS (\r\n    SELECT\r\n        item_category_id,\r\n        AVG(revenue) AS avg_revenue\r\n    FROM monthly_revenue\r\n    GROUP BY 1\r\n),\r\n\r\nseasonality_index AS (\r\n    SELECT\r\n        m.item_category_id,\r\n        m.item_category_name,\r\n        m.month_label,\r\n        m.month_num,\r\n        ROUND(m.revenue / NULLIF(c.avg_revenue, 0), 2) AS seasonality_score\r\n    FROM monthly_revenue m\r\n    JOIN category_avg c USING(item_category_id)\r\n)\r\n\r\nSELECT *\r\nFROM seasonality_index\r\nORDER BY item_category_name, month_num", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.mart_monthly_sales", "model.dbt_sales_pipeline.stg_items", "model.dbt_sales_pipeline.stg_item_categories"]}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_seasonality_by_category"], "unique_id": "model.dbt_sales_pipeline.mart_seasonality_by_category", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_seasonality_by_category.sql", "original_file_path": "models/marts/mart_seasonality_by_category.sql", "name": "mart_seasonality_by_category", "alias": "mart_seasonality_by_category", "checksum": {"name": "sha256", "checksum": "9589b9ecbe67a9cfb6a4fe530b8138cd7dcb0e69336e9701a38abc7a52a1b822"}, "tags": [], "refs": [["stg_sales_train"], ["mart_monthly_sales"], ["stg_items"], ["stg_item_categories"]], "sources": [], "description": "Seasonality index per item category over months", "columns": {"ITEM_CATEGORY_ID": {"name": "ITEM_CATEGORY_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ITEM_CATEGORY_NAME": {"name": "ITEM_CATEGORY_NAME", "description": "Human-readable name of the category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_LABEL": {"name": "MONTH_LABEL", "description": "Month name (Jan\u2013Dec)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_NUM": {"name": "MONTH_NUM", "description": "Numeric month (1\u201312)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SEASONALITY_SCORE": {"name": "SEASONALITY_SCORE", "description": "Relative seasonality index per category/month", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_seasonality_by_category.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.9144385, "compiled_sql": "WITH base_date_cte AS (\n    SELECT MIN(TO_DATE(date, 'DD.MM.YYYY')) AS base_date\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train\n),\n\nmonthly_sales_with_category AS (\n    SELECT\n        m.date_block_num,\n        i.item_category_id,\n        c.item_category_name,\n        DATEADD(month, m.date_block_num, b.base_date) AS date_month,\n        SUM(m.monthly_revenue) AS monthly_revenue\n    FROM SALES_PIPELINE.RAW_marts.mart_monthly_sales m\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_items i ON m.item_id = i.item_id\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_item_categories c ON i.item_category_id = c.item_category_id\n    CROSS JOIN base_date_cte b\n    GROUP BY 1, 2, 3, 4\n),\n\nmonthly_revenue AS (\n    SELECT\n        item_category_id,\n        item_category_name,\n        TO_CHAR(date_month, 'Mon') AS month_label,\n        EXTRACT(MONTH FROM date_month) AS month_num,\n        SUM(monthly_revenue) AS revenue\n    FROM monthly_sales_with_category\n    GROUP BY 1, 2, 3, 4\n),\n\ncategory_avg AS (\n    SELECT\n        item_category_id,\n        AVG(revenue) AS avg_revenue\n    FROM monthly_revenue\n    GROUP BY 1\n),\n\nseasonality_index AS (\n    SELECT\n        m.item_category_id,\n        m.item_category_name,\n        m.month_label,\n        m.month_num,\n        ROUND(m.revenue / NULLIF(c.avg_revenue, 0), 2) AS seasonality_score\n    FROM monthly_revenue m\n    JOIN category_avg c USING(item_category_id)\n)\n\nSELECT *\nFROM seasonality_index\nORDER BY item_category_name, month_num", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_seasonality_by_category"}, "model.dbt_sales_pipeline.mart_shop_category_matrix": {"raw_sql": "WITH shop_category_sales AS (\r\n    SELECT\r\n        s.shop_id,\r\n        sh.shop_name,\r\n        ic.item_category_id,\r\n        ic.item_category_name,\r\n        ROUND(SUM(s.item_price * s.item_cnt_day), 2) AS total_revenue\r\n    FROM {{ ref('stg_sales_train') }} s\r\n    LEFT JOIN {{ ref('stg_items') }} i\r\n        ON s.item_id = i.item_id\r\n    LEFT JOIN {{ ref('stg_item_categories') }} ic\r\n        ON i.item_category_id = ic.item_category_id\r\n    LEFT JOIN {{ ref('stg_shops') }} sh\r\n        ON s.shop_id = sh.shop_id\r\n    GROUP BY s.shop_id, sh.shop_name, ic.item_category_id, ic.item_category_name\r\n)\r\n\r\nSELECT *\r\nFROM shop_category_sales\r\nORDER BY shop_id, total_revenue DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_items", "model.dbt_sales_pipeline.stg_item_categories", "model.dbt_sales_pipeline.stg_shops"]}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_shop_category_matrix"], "unique_id": "model.dbt_sales_pipeline.mart_shop_category_matrix", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_shop_category_matrix.sql", "original_file_path": "models/marts/mart_shop_category_matrix.sql", "name": "mart_shop_category_matrix", "alias": "mart_shop_category_matrix", "checksum": {"name": "sha256", "checksum": "8f5a606b7ad8854abb82480bce63aa67cc59380b9352a469137419da133ff1c0"}, "tags": [], "refs": [["stg_sales_train"], ["stg_items"], ["stg_item_categories"], ["stg_shops"]], "sources": [], "description": "Revenue per item category per shop", "columns": {"shop_id": {"name": "shop_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_category_id": {"name": "item_category_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_shop_category_matrix.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.909604, "compiled_sql": "WITH shop_category_sales AS (\n    SELECT\n        s.shop_id,\n        sh.shop_name,\n        ic.item_category_id,\n        ic.item_category_name,\n        ROUND(SUM(s.item_price * s.item_cnt_day), 2) AS total_revenue\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train s\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_items i\n        ON s.item_id = i.item_id\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_item_categories ic\n        ON i.item_category_id = ic.item_category_id\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_shops sh\n        ON s.shop_id = sh.shop_id\n    GROUP BY s.shop_id, sh.shop_name, ic.item_category_id, ic.item_category_name\n)\n\nSELECT *\nFROM shop_category_sales\nORDER BY shop_id, total_revenue DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_shop_category_matrix"}, "model.dbt_sales_pipeline.mart_shop_profile": {"raw_sql": "WITH monthly_shop_revenue AS (\r\n    SELECT\r\n        shop_id,\r\n        DATE_TRUNC('month', TO_DATE(date, 'DD.MM.YYYY')) AS month,\r\n        SUM(item_price * item_cnt_day) AS monthly_revenue\r\n    FROM {{ ref('stg_sales_train') }}\r\n    GROUP BY shop_id, month\r\n),\r\n\r\nshop_stats AS (\r\n    SELECT\r\n        s.shop_id,\r\n        COUNT(DISTINCT i.item_category_id) AS category_count,\r\n        AVG(s.item_price) AS avg_item_price,\r\n        SUM(s.item_price * s.item_cnt_day) / COUNT(DISTINCT s.item_id) AS revenue_per_item\r\n    FROM {{ ref('stg_sales_train') }} s\r\n    LEFT JOIN {{ ref('stg_items') }} i ON s.item_id = i.item_id\r\n    GROUP BY s.shop_id\r\n),\r\n\r\nrevenue_variance AS (\r\n    SELECT\r\n        shop_id,\r\n        STDDEV(monthly_revenue) AS revenue_stddev\r\n    FROM monthly_shop_revenue\r\n    GROUP BY shop_id\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        ss.shop_id,\r\n        sc.shop_name,\r\n        ss.category_count,\r\n        ROUND(ss.avg_item_price, 2) AS avg_item_price,\r\n        ROUND(ss.revenue_per_item, 2) AS revenue_per_item,\r\n        ROUND(rv.revenue_stddev, 2) AS monthly_revenue_variance\r\n    FROM shop_stats ss\r\n    LEFT JOIN {{ ref('stg_shops') }} sc ON ss.shop_id = sc.shop_id\r\n    LEFT JOIN revenue_variance rv ON ss.shop_id = rv.shop_id\r\n    ORDER BY revenue_per_item DESC\r\n    LIMIT 10\r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_items", "model.dbt_sales_pipeline.stg_shops"]}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_shop_profile"], "unique_id": "model.dbt_sales_pipeline.mart_shop_profile", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_shop_profile.sql", "original_file_path": "models/marts/mart_shop_profile.sql", "name": "mart_shop_profile", "alias": "mart_shop_profile", "checksum": {"name": "sha256", "checksum": "dd770bda004e7cd6ac736e791decaf2e1e9cf7c020079b27d004596a89a9724b"}, "tags": [], "refs": [["stg_sales_train"], ["stg_sales_train"], ["stg_items"], ["stg_shops"]], "sources": [], "description": "Summary metrics describing each shop's profile including category diversity, pricing, revenue efficiency, and monthly consistency.\n", "columns": {"SHOP_ID": {"name": "SHOP_ID", "description": "Unique identifier for the shop", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHOP_NAME": {"name": "SHOP_NAME", "description": "Human-readable name of the shop", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CATEGORY_COUNT": {"name": "CATEGORY_COUNT", "description": "Number of distinct item categories sold by the shop", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVG_ITEM_PRICE": {"name": "AVG_ITEM_PRICE", "description": "Average item price sold by the shop", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REVENUE_PER_ITEM": {"name": "REVENUE_PER_ITEM", "description": "Average revenue generated per unique item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTHLY_REVENUE_VARIANCE": {"name": "MONTHLY_REVENUE_VARIANCE", "description": "Variance of monthly revenue over time \u2013 proxy for sales consistency", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_shop_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.9113896, "compiled_sql": "WITH monthly_shop_revenue AS (\n    SELECT\n        shop_id,\n        DATE_TRUNC('month', TO_DATE(date, 'DD.MM.YYYY')) AS month,\n        SUM(item_price * item_cnt_day) AS monthly_revenue\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train\n    GROUP BY shop_id, month\n),\n\nshop_stats AS (\n    SELECT\n        s.shop_id,\n        COUNT(DISTINCT i.item_category_id) AS category_count,\n        AVG(s.item_price) AS avg_item_price,\n        SUM(s.item_price * s.item_cnt_day) / COUNT(DISTINCT s.item_id) AS revenue_per_item\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train s\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_items i ON s.item_id = i.item_id\n    GROUP BY s.shop_id\n),\n\nrevenue_variance AS (\n    SELECT\n        shop_id,\n        STDDEV(monthly_revenue) AS revenue_stddev\n    FROM monthly_shop_revenue\n    GROUP BY shop_id\n),\n\nfinal AS (\n    SELECT\n        ss.shop_id,\n        sc.shop_name,\n        ss.category_count,\n        ROUND(ss.avg_item_price, 2) AS avg_item_price,\n        ROUND(ss.revenue_per_item, 2) AS revenue_per_item,\n        ROUND(rv.revenue_stddev, 2) AS monthly_revenue_variance\n    FROM shop_stats ss\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_shops sc ON ss.shop_id = sc.shop_id\n    LEFT JOIN revenue_variance rv ON ss.shop_id = rv.shop_id\n    ORDER BY revenue_per_item DESC\n    LIMIT 10\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_shop_profile"}, "model.dbt_sales_pipeline.mart_top_item_categories": {"raw_sql": "WITH category_revenue AS (\r\n    SELECT\r\n        ic.item_category_id,\r\n        ic.item_category_name,\r\n        ROUND(SUM(s.item_price * s.item_cnt_day), 2) AS total_revenue\r\n    FROM {{ ref('stg_sales_train') }} s\r\n    LEFT JOIN {{ ref('stg_items') }} i\r\n        ON s.item_id = i.item_id\r\n    LEFT JOIN {{ ref('stg_item_categories') }} ic\r\n        ON i.item_category_id = ic.item_category_id\r\n    GROUP BY ic.item_category_id, ic.item_category_name\r\n)\r\n\r\nSELECT\r\n    item_category_id,\r\n    item_category_name,\r\n    total_revenue\r\nFROM category_revenue\r\nORDER BY total_revenue DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_items", "model.dbt_sales_pipeline.stg_item_categories"]}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_top_item_categories"], "unique_id": "model.dbt_sales_pipeline.mart_top_item_categories", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_top_item_categories.sql", "original_file_path": "models/marts/mart_top_item_categories.sql", "name": "mart_top_item_categories", "alias": "mart_top_item_categories", "checksum": {"name": "sha256", "checksum": "d15a14618eea9e3c2419b9a6c965d63bbc54ebdf71fc115be19616d03fdfd233"}, "tags": [], "refs": [["stg_sales_train"], ["stg_items"], ["stg_item_categories"]], "sources": [], "description": "Revenue per item category", "columns": {"item_category_id": {"name": "item_category_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_revenue": {"name": "total_revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_top_item_categories.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.9088535, "compiled_sql": "WITH category_revenue AS (\n    SELECT\n        ic.item_category_id,\n        ic.item_category_name,\n        ROUND(SUM(s.item_price * s.item_cnt_day), 2) AS total_revenue\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train s\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_items i\n        ON s.item_id = i.item_id\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_item_categories ic\n        ON i.item_category_id = ic.item_category_id\n    GROUP BY ic.item_category_id, ic.item_category_name\n)\n\nSELECT\n    item_category_id,\n    item_category_name,\n    total_revenue\nFROM category_revenue\nORDER BY total_revenue DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_top_item_categories"}, "model.dbt_sales_pipeline.mart_top_products": {"raw_sql": "SELECT \n  item_id,\n  SUM(item_cnt_day) AS total_units_sold\nFROM RAW.sales_train\nGROUP BY item_id\nORDER BY total_units_sold DESC\nLIMIT 10", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_top_products"], "unique_id": "model.dbt_sales_pipeline.mart_top_products", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_top_products.sql", "original_file_path": "models/marts/mart_top_products.sql", "name": "mart_top_products", "alias": "mart_top_products", "checksum": {"name": "sha256", "checksum": "75f7e21a9bdd4462f16fd97fb36d4ede69d03738d4c9e054d7e0963dc7302af4"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_top_products.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.8341033, "compiled_sql": "SELECT \n  item_id,\n  SUM(item_cnt_day) AS total_units_sold\nFROM RAW.sales_train\nGROUP BY item_id\nORDER BY total_units_sold DESC\nLIMIT 10", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_top_products"}, "model.dbt_sales_pipeline.mart_top_shops": {"raw_sql": "WITH shop_revenue AS (\r\n    SELECT\r\n        s.shop_id,\r\n        shp.shop_name,\r\n        ROUND(SUM(s.item_price * s.item_cnt_day), 2) AS total_revenue\r\n    FROM {{ ref('stg_sales_train') }} s\r\n    LEFT JOIN {{ ref('stg_shops') }} shp\r\n        ON s.shop_id = shp.shop_id\r\n    GROUP BY s.shop_id, shp.shop_name\r\n)\r\n\r\nSELECT\r\n    shop_id,\r\n    shop_name,\r\n    total_revenue\r\nFROM shop_revenue\r\nORDER BY total_revenue DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_shops"]}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_top_shops"], "unique_id": "model.dbt_sales_pipeline.mart_top_shops", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_top_shops.sql", "original_file_path": "models/marts/mart_top_shops.sql", "name": "mart_top_shops", "alias": "mart_top_shops", "checksum": {"name": "sha256", "checksum": "369878dfbe4c88ef573a58214ad02572e5ca037e499e896140fffcf253af11a4"}, "tags": [], "refs": [["stg_sales_train"], ["stg_shops"]], "sources": [], "description": "Total revenue per shop", "columns": {"shop_id": {"name": "shop_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_revenue": {"name": "total_revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_top_shops.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.908023, "compiled_sql": "WITH shop_revenue AS (\n    SELECT\n        s.shop_id,\n        shp.shop_name,\n        ROUND(SUM(s.item_price * s.item_cnt_day), 2) AS total_revenue\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train s\n    LEFT JOIN SALES_PIPELINE.RAW_staging.stg_shops shp\n        ON s.shop_id = shp.shop_id\n    GROUP BY s.shop_id, shp.shop_name\n)\n\nSELECT\n    shop_id,\n    shop_name,\n    total_revenue\nFROM shop_revenue\nORDER BY total_revenue DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_top_shops"}, "model.dbt_sales_pipeline.mart_total_revenue": {"raw_sql": "WITH sales_data AS (\r\n    SELECT\r\n        date,\r\n        item_price,\r\n        item_cnt_day,\r\n        item_price * item_cnt_day AS revenue\r\n    FROM {{ ref('stg_sales_train') }}\r\n)\r\n\r\nSELECT\r\n    SUM(revenue) AS total_revenue\r\nFROM sales_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_marts", "fqn": ["dbt_sales_pipeline", "marts", "mart_total_revenue"], "unique_id": "model.dbt_sales_pipeline.mart_total_revenue", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "marts/mart_total_revenue.sql", "original_file_path": "models/marts/mart_total_revenue.sql", "name": "mart_total_revenue", "alias": "mart_total_revenue", "checksum": {"name": "sha256", "checksum": "d340258bcb55b154c5c937570a7fadaa410153da5ddf0970f99f131243ac9e1d"}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "Total revenue computed across all sales", "columns": {"total_revenue": {"name": "total_revenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/marts/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/mart_total_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1754400432.9065127, "compiled_sql": "WITH sales_data AS (\n    SELECT\n        date,\n        item_price,\n        item_cnt_day,\n        item_price * item_cnt_day AS revenue\n    FROM SALES_PIPELINE.RAW_staging.stg_sales_train\n)\n\nSELECT\n    SUM(revenue) AS total_revenue\nFROM sales_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_marts.mart_total_revenue"}, "model.dbt_sales_pipeline.stg_items": {"raw_sql": "-- models/staging/stg_items.sql\r\n\r\nwith source as (\r\n    select * FROM {{ source('raw', 'translated_items') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        item_id::int as item_id,\r\n        item_name::string as item_name,\r\n        item_category_id::int as item_category_id\r\n    from source\r\n)\r\n\r\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dbt_sales_pipeline.raw.translated_items"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_staging", "fqn": ["dbt_sales_pipeline", "staging", "stg_items"], "unique_id": "model.dbt_sales_pipeline.stg_items", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "staging/stg_items.sql", "original_file_path": "models/staging/stg_items.sql", "name": "stg_items", "alias": "stg_items", "checksum": {"name": "sha256", "checksum": "71e5298be625d09afe14288a9df8a6d3c00f214bfd616f360a09cf3c254d37b9"}, "tags": [], "refs": [], "sources": [["raw", "translated_items"]], "description": "Staging model for raw items data.", "columns": {"item_id": {"name": "item_id", "description": "Unique identifier for the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_name": {"name": "item_name", "description": "Name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/staging/stg_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1754400432.866431, "compiled_sql": "-- models/staging/stg_items.sql\n\nwith source as (\n    select * FROM SALES_PIPELINE.RAW.translated_items\n),\n\nrenamed as (\n    select\n        item_id::int as item_id,\n        item_name::string as item_name,\n        item_category_id::int as item_category_id\n    from source\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_staging.stg_items"}, "model.dbt_sales_pipeline.stg_item_categories": {"raw_sql": "-- models/staging/stg_item_categories.sql\r\n\r\nwith source as (\r\n    select * FROM {{ source('raw', 'translated_item_categories') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        item_category_id::int as item_category_id,\r\n        item_category_name::string as item_category_name\r\n    from source\r\n)\r\n\r\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dbt_sales_pipeline.raw.translated_item_categories"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_staging", "fqn": ["dbt_sales_pipeline", "staging", "stg_item_categories"], "unique_id": "model.dbt_sales_pipeline.stg_item_categories", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "staging/stg_item_categories.sql", "original_file_path": "models/staging/stg_item_categories.sql", "name": "stg_item_categories", "alias": "stg_item_categories", "checksum": {"name": "sha256", "checksum": "d3fdd687b8cd34aa05573f80e08e2a53751a8c15b92052023c4361a432888c09"}, "tags": [], "refs": [], "sources": [["raw", "translated_item_categories"]], "description": "Staging model for raw item category data.", "columns": {"item_category_id": {"name": "item_category_id", "description": "Unique identifier for the item category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_category_name": {"name": "item_category_name", "description": "Name of the item category.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/staging/stg_item_categories.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1754400432.8683877, "compiled_sql": "-- models/staging/stg_item_categories.sql\n\nwith source as (\n    select * FROM SALES_PIPELINE.RAW.translated_item_categories\n),\n\nrenamed as (\n    select\n        item_category_id::int as item_category_id,\n        item_category_name::string as item_category_name\n    from source\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_staging.stg_item_categories"}, "model.dbt_sales_pipeline.stg_sales_train": {"raw_sql": "-- models/staging/stg_sales_train.sql\r\n\r\nwith source as (\r\n    select\r\n        date,\r\n        cast(date_block_num as int) as date_block_num,\r\n        cast(shop_id as int) as shop_id,\r\n        cast(item_id as int) as item_id,\r\n        cast(item_price as float) as item_price,\r\n        cast(item_cnt_day as float) as item_cnt_day\r\n    FROM {{ source('raw', 'sales_train') }}\r\n)\r\n\r\nselect * from source", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dbt_sales_pipeline.raw.sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_staging", "fqn": ["dbt_sales_pipeline", "staging", "stg_sales_train"], "unique_id": "model.dbt_sales_pipeline.stg_sales_train", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "staging/stg_sales_train.sql", "original_file_path": "models/staging/stg_sales_train.sql", "name": "stg_sales_train", "alias": "stg_sales_train", "checksum": {"name": "sha256", "checksum": "04c0cc8813265f8add13a1a7b0c8380ba612245233bec67c5be40a73d532795a"}, "tags": [], "refs": [], "sources": [["raw", "sales_train"]], "description": "Staging model for raw sales data.", "columns": {"date": {"name": "date", "description": "The date of the sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_block_num": {"name": "date_block_num", "description": "Time block number for the month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shop_id": {"name": "shop_id", "description": "Shop identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Item identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_price": {"name": "item_price", "description": "Price of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_cnt_day": {"name": "item_cnt_day", "description": "Quantity of items sold on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/staging/stg_sales_train.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1754400432.8652365, "compiled_sql": "-- models/staging/stg_sales_train.sql\n\nwith source as (\n    select\n        date,\n        cast(date_block_num as int) as date_block_num,\n        cast(shop_id as int) as shop_id,\n        cast(item_id as int) as item_id,\n        cast(item_price as float) as item_price,\n        cast(item_cnt_day as float) as item_cnt_day\n    FROM SALES_PIPELINE.RAW.sales_train\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_staging.stg_sales_train"}, "model.dbt_sales_pipeline.stg_shops": {"raw_sql": "-- models/staging/stg_shops.sql\r\n\r\nwith source as (\r\n    select * FROM {{ source('raw', 'translated_shops') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        shop_id::int as shop_id,\r\n        shop_name::string as shop_name\r\n    from source\r\n)\r\n\r\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dbt_sales_pipeline.raw.translated_shops"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_staging", "fqn": ["dbt_sales_pipeline", "staging", "stg_shops"], "unique_id": "model.dbt_sales_pipeline.stg_shops", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "staging/stg_shops.sql", "original_file_path": "models/staging/stg_shops.sql", "name": "stg_shops", "alias": "stg_shops", "checksum": {"name": "sha256", "checksum": "6ed033b1041e545bb51d7450bc30b9cb9fdc789eb0381660b3e8235e65384829"}, "tags": [], "refs": [], "sources": [["raw", "translated_shops"]], "description": "Staging model for raw shops data.", "columns": {"shop_id": {"name": "shop_id", "description": "Unique identifier for the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shop_name": {"name": "shop_name", "description": "Name of the shop.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_sales_pipeline://models/schema.yml", "compiled_path": "target/compiled/dbt_sales_pipeline/models/staging/stg_shops.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1754400432.8673766, "compiled_sql": "-- models/staging/stg_shops.sql\n\nwith source as (\n    select * FROM SALES_PIPELINE.RAW.translated_shops\n),\n\nrenamed as (\n    select\n        shop_id::int as shop_id,\n        shop_name::string as shop_name\n    from source\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_staging.stg_shops"}, "model.dbt_sales_pipeline.base_date": {"raw_sql": "SELECT\r\n  MIN(DATE) AS BASE_DATE\r\nFROM {{ ref('stg_sales_train') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SALES_PIPELINE", "schema": "RAW_staging", "fqn": ["dbt_sales_pipeline", "utils", "base_date"], "unique_id": "model.dbt_sales_pipeline.base_date", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "utils/base_date.sql", "original_file_path": "models/utils/base_date.sql", "name": "base_date", "alias": "base_date", "checksum": {"name": "sha256", "checksum": "9c2c2e6123d77c332902b9a9f353411c0759b2649c678709cebcb6273b6c4f5a"}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/utils/base_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1754400432.8506765, "compiled_sql": "SELECT\n  MIN(DATE) AS BASE_DATE\nFROM SALES_PIPELINE.RAW_staging.stg_sales_train", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SALES_PIPELINE.RAW_staging.base_date"}, "test.dbt_sales_pipeline.not_null_stg_sales_train_date.8dbbe923c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_sales_train')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_sales_train_date"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_sales_train_date.8dbbe923c9", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_sales_train_date.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_sales_train_date", "alias": "not_null_stg_sales_train_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_sales_train_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.873341, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_sales_train\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.stg_sales_train"}, "test.dbt_sales_pipeline.not_null_stg_sales_train_date_block_num.434ae7f18d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_block_num", "model": "{{ get_where_subquery(ref('stg_sales_train')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_sales_train_date_block_num"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_sales_train_date_block_num.434ae7f18d", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_sales_train_date_block_num.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_sales_train_date_block_num", "alias": "not_null_stg_sales_train_date_block_num", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_sales_train_date_block_num.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8750777, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_sales_train\nwhere date_block_num is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_block_num", "file_key_name": "models.stg_sales_train"}, "test.dbt_sales_pipeline.not_null_stg_sales_train_shop_id.9a549f4831": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shop_id", "model": "{{ get_where_subquery(ref('stg_sales_train')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_sales_train_shop_id"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_sales_train_shop_id.9a549f4831", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_sales_train_shop_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_sales_train_shop_id", "alias": "not_null_stg_sales_train_shop_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_sales_train_shop_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8766353, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_sales_train\nwhere shop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "shop_id", "file_key_name": "models.stg_sales_train"}, "test.dbt_sales_pipeline.not_null_stg_sales_train_item_id.85349643d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_sales_train')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_sales_train_item_id"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_sales_train_item_id.85349643d8", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_sales_train_item_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_sales_train_item_id", "alias": "not_null_stg_sales_train_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_sales_train_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8780308, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_sales_train\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id", "file_key_name": "models.stg_sales_train"}, "test.dbt_sales_pipeline.not_null_stg_sales_train_item_price.857f5a42da": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_price", "model": "{{ get_where_subquery(ref('stg_sales_train')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_sales_train_item_price"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_sales_train_item_price.857f5a42da", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_sales_train_item_price.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_sales_train_item_price", "alias": "not_null_stg_sales_train_item_price", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_sales_train_item_price.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.879588, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_sales_train\nwhere item_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_price", "file_key_name": "models.stg_sales_train"}, "test.dbt_sales_pipeline.not_null_stg_sales_train_item_cnt_day.55e375a5c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_cnt_day", "model": "{{ get_where_subquery(ref('stg_sales_train')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_sales_train"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_sales_train_item_cnt_day"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_sales_train_item_cnt_day.55e375a5c7", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_sales_train_item_cnt_day.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_sales_train_item_cnt_day", "alias": "not_null_stg_sales_train_item_cnt_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sales_train"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_sales_train_item_cnt_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8812087, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_sales_train\nwhere item_cnt_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_cnt_day", "file_key_name": "models.stg_sales_train"}, "test.dbt_sales_pipeline.not_null_stg_items_item_id.2983e86e1a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_items_item_id"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_items_item_id.2983e86e1a", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_items_item_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_items_item_id", "alias": "not_null_stg_items_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_items_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8827755, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_items\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id", "file_key_name": "models.stg_items"}, "test.dbt_sales_pipeline.unique_stg_items_item_id.20a7a48757": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('stg_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "unique_stg_items_item_id"], "unique_id": "test.dbt_sales_pipeline.unique_stg_items_item_id.20a7a48757", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "unique_stg_items_item_id.sql", "original_file_path": "models/schema.yml", "name": "unique_stg_items_item_id", "alias": "unique_stg_items_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/unique_stg_items_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.884116, "compiled_sql": "\n    \n    \n\nselect\n    item_id as unique_field,\n    count(*) as n_records\n\nfrom SALES_PIPELINE.RAW_staging.stg_items\nwhere item_id is not null\ngroup by item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id", "file_key_name": "models.stg_items"}, "test.dbt_sales_pipeline.not_null_stg_items_item_name.d5044a8c85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_name", "model": "{{ get_where_subquery(ref('stg_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_items_item_name"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_items_item_name.d5044a8c85", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_items_item_name.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_items_item_name", "alias": "not_null_stg_items_item_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_items_item_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8856635, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_items\nwhere item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_name", "file_key_name": "models.stg_items"}, "test.dbt_sales_pipeline.not_null_stg_shops_shop_id.57fba4b2db": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shop_id", "model": "{{ get_where_subquery(ref('stg_shops')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_shops"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_shops_shop_id"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_shops_shop_id.57fba4b2db", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_shops_shop_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_shops_shop_id", "alias": "not_null_stg_shops_shop_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shops"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_shops_shop_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.886966, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_shops\nwhere shop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "shop_id", "file_key_name": "models.stg_shops"}, "test.dbt_sales_pipeline.unique_stg_shops_shop_id.76719fa9d3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "shop_id", "model": "{{ get_where_subquery(ref('stg_shops')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_shops"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "unique_stg_shops_shop_id"], "unique_id": "test.dbt_sales_pipeline.unique_stg_shops_shop_id.76719fa9d3", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "unique_stg_shops_shop_id.sql", "original_file_path": "models/schema.yml", "name": "unique_stg_shops_shop_id", "alias": "unique_stg_shops_shop_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shops"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/unique_stg_shops_shop_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8883204, "compiled_sql": "\n    \n    \n\nselect\n    shop_id as unique_field,\n    count(*) as n_records\n\nfrom SALES_PIPELINE.RAW_staging.stg_shops\nwhere shop_id is not null\ngroup by shop_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "shop_id", "file_key_name": "models.stg_shops"}, "test.dbt_sales_pipeline.not_null_stg_shops_shop_name.9a24728aef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shop_name", "model": "{{ get_where_subquery(ref('stg_shops')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_shops"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_shops_shop_name"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_shops_shop_name.9a24728aef", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_shops_shop_name.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_shops_shop_name", "alias": "not_null_stg_shops_shop_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_shops"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_shops_shop_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8897054, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_shops\nwhere shop_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "shop_name", "file_key_name": "models.stg_shops"}, "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_id.7a34a016c6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_category_id", "model": "{{ get_where_subquery(ref('stg_item_categories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_item_categories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_item_categories_item_category_id"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_id.7a34a016c6", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_item_categories_item_category_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_item_categories_item_category_id", "alias": "not_null_stg_item_categories_item_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_item_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_item_categories_item_category_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.891192, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_item_categories\nwhere item_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_category_id", "file_key_name": "models.stg_item_categories"}, "test.dbt_sales_pipeline.unique_stg_item_categories_item_category_id.93e4d17e96": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_category_id", "model": "{{ get_where_subquery(ref('stg_item_categories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_item_categories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "unique_stg_item_categories_item_category_id"], "unique_id": "test.dbt_sales_pipeline.unique_stg_item_categories_item_category_id.93e4d17e96", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "unique_stg_item_categories_item_category_id.sql", "original_file_path": "models/schema.yml", "name": "unique_stg_item_categories_item_category_id", "alias": "unique_stg_item_categories_item_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_item_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/unique_stg_item_categories_item_category_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8926413, "compiled_sql": "\n    \n    \n\nselect\n    item_category_id as unique_field,\n    count(*) as n_records\n\nfrom SALES_PIPELINE.RAW_staging.stg_item_categories\nwhere item_category_id is not null\ngroup by item_category_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_category_id", "file_key_name": "models.stg_item_categories"}, "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_name.b180d231b8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_category_name", "model": "{{ get_where_subquery(ref('stg_item_categories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.stg_item_categories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "not_null_stg_item_categories_item_category_name"], "unique_id": "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_name.b180d231b8", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_stg_item_categories_item_category_name.sql", "original_file_path": "models/schema.yml", "name": "not_null_stg_item_categories_item_category_name", "alias": "not_null_stg_item_categories_item_category_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_item_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/schema.yml/not_null_stg_item_categories_item_category_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.8940687, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_staging.stg_item_categories\nwhere item_category_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_category_name", "file_key_name": "models.stg_item_categories"}, "test.dbt_sales_pipeline.not_null_mart_daily_sales_date.1ea3355861": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('mart_daily_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_daily_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_daily_sales_date"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_daily_sales_date.1ea3355861", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_daily_sales_date.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_daily_sales_date", "alias": "not_null_mart_daily_sales_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_daily_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_daily_sales_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9151103, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_daily_sales\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.mart_daily_sales"}, "test.dbt_sales_pipeline.not_null_mart_daily_sales_shop_id.ed61a04c50": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shop_id", "model": "{{ get_where_subquery(ref('mart_daily_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_daily_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_daily_sales_shop_id"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_daily_sales_shop_id.ed61a04c50", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_daily_sales_shop_id.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_daily_sales_shop_id", "alias": "not_null_mart_daily_sales_shop_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_daily_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_daily_sales_shop_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9168794, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_daily_sales\nwhere shop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "shop_id", "file_key_name": "models.mart_daily_sales"}, "test.dbt_sales_pipeline.not_null_mart_daily_sales_item_id.2d2aa8161f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('mart_daily_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_daily_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_daily_sales_item_id"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_daily_sales_item_id.2d2aa8161f", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_daily_sales_item_id.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_daily_sales_item_id", "alias": "not_null_mart_daily_sales_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_daily_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_daily_sales_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9184396, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_daily_sales\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id", "file_key_name": "models.mart_daily_sales"}, "test.dbt_sales_pipeline.not_null_mart_monthly_sales_date_block_num.c05d4ef562": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_block_num", "model": "{{ get_where_subquery(ref('mart_monthly_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_monthly_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_monthly_sales_date_block_num"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_monthly_sales_date_block_num.c05d4ef562", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_monthly_sales_date_block_num.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_monthly_sales_date_block_num", "alias": "not_null_mart_monthly_sales_date_block_num", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_monthly_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_monthly_sales_date_block_num.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.920013, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_monthly_sales\nwhere date_block_num is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_block_num", "file_key_name": "models.mart_monthly_sales"}, "test.dbt_sales_pipeline.not_null_mart_monthly_sales_shop_id.b19f0e419a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shop_id", "model": "{{ get_where_subquery(ref('mart_monthly_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_monthly_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_monthly_sales_shop_id"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_monthly_sales_shop_id.b19f0e419a", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_monthly_sales_shop_id.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_monthly_sales_shop_id", "alias": "not_null_mart_monthly_sales_shop_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_monthly_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_monthly_sales_shop_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9213817, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_monthly_sales\nwhere shop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "shop_id", "file_key_name": "models.mart_monthly_sales"}, "test.dbt_sales_pipeline.not_null_mart_monthly_sales_item_id.4e105c8eb8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('mart_monthly_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_monthly_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_monthly_sales_item_id"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_monthly_sales_item_id.4e105c8eb8", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_monthly_sales_item_id.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_monthly_sales_item_id", "alias": "not_null_mart_monthly_sales_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_monthly_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_monthly_sales_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9228158, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_monthly_sales\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id", "file_key_name": "models.mart_monthly_sales"}, "test.dbt_sales_pipeline.not_null_mart_total_revenue_total_revenue.207dd0bbe6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_revenue", "model": "{{ get_where_subquery(ref('mart_total_revenue')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_total_revenue"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_total_revenue_total_revenue"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_total_revenue_total_revenue.207dd0bbe6", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_total_revenue_total_revenue.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_total_revenue_total_revenue", "alias": "not_null_mart_total_revenue_total_revenue", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_total_revenue"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_total_revenue_total_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9241211, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_total_revenue\nwhere total_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_revenue", "file_key_name": "models.mart_total_revenue"}, "test.dbt_sales_pipeline.not_null_mart_revenue_by_month_date_block_num.dc35a0bd5f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_block_num", "model": "{{ get_where_subquery(ref('mart_revenue_by_month')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_revenue_by_month"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_revenue_by_month_date_block_num"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_revenue_by_month_date_block_num.dc35a0bd5f", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_revenue_by_month_date_block_num.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_revenue_by_month_date_block_num", "alias": "not_null_mart_revenue_by_month_date_block_num", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_revenue_by_month"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_revenue_by_month_date_block_num.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9258933, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_revenue_by_month\nwhere date_block_num is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_block_num", "file_key_name": "models.mart_revenue_by_month"}, "test.dbt_sales_pipeline.not_null_mart_revenue_by_month_monthly_revenue.7b84e90f1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "monthly_revenue", "model": "{{ get_where_subquery(ref('mart_revenue_by_month')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_revenue_by_month"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_revenue_by_month_monthly_revenue"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_revenue_by_month_monthly_revenue.7b84e90f1b", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_revenue_by_month_monthly_revenue.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_revenue_by_month_monthly_revenue", "alias": "not_null_mart_revenue_by_month_monthly_revenue", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_revenue_by_month"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_revenue_by_month_monthly_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9274178, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_revenue_by_month\nwhere monthly_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "monthly_revenue", "file_key_name": "models.mart_revenue_by_month"}, "test.dbt_sales_pipeline.not_null_mart_top_shops_shop_id.5f28a1ac83": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shop_id", "model": "{{ get_where_subquery(ref('mart_top_shops')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_top_shops"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_top_shops_shop_id"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_top_shops_shop_id.5f28a1ac83", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_top_shops_shop_id.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_top_shops_shop_id", "alias": "not_null_mart_top_shops_shop_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_top_shops"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_top_shops_shop_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9292061, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_top_shops\nwhere shop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "shop_id", "file_key_name": "models.mart_top_shops"}, "test.dbt_sales_pipeline.not_null_mart_top_shops_total_revenue.8061af0001": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_revenue", "model": "{{ get_where_subquery(ref('mart_top_shops')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_top_shops"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_top_shops_total_revenue"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_top_shops_total_revenue.8061af0001", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_top_shops_total_revenue.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_top_shops_total_revenue", "alias": "not_null_mart_top_shops_total_revenue", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_top_shops"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_top_shops_total_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9307814, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_top_shops\nwhere total_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_revenue", "file_key_name": "models.mart_top_shops"}, "test.dbt_sales_pipeline.not_null_mart_top_item_categories_item_category_id.662c4872fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_category_id", "model": "{{ get_where_subquery(ref('mart_top_item_categories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_top_item_categories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_top_item_categories_item_category_id"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_top_item_categories_item_category_id.662c4872fb", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_top_item_categories_item_category_id.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_top_item_categories_item_category_id", "alias": "not_null_mart_top_item_categories_item_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_top_item_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_top_item_categories_item_category_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9320567, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_top_item_categories\nwhere item_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_category_id", "file_key_name": "models.mart_top_item_categories"}, "test.dbt_sales_pipeline.not_null_mart_top_item_categories_total_revenue.2e4999a765": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_revenue", "model": "{{ get_where_subquery(ref('mart_top_item_categories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_top_item_categories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_top_item_categories_total_revenue"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_top_item_categories_total_revenue.2e4999a765", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_top_item_categories_total_revenue.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_top_item_categories_total_revenue", "alias": "not_null_mart_top_item_categories_total_revenue", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_top_item_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_top_item_categories_total_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.93329, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_top_item_categories\nwhere total_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_revenue", "file_key_name": "models.mart_top_item_categories"}, "test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_shop_id.9e4e4a7575": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shop_id", "model": "{{ get_where_subquery(ref('mart_shop_category_matrix')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_shop_category_matrix"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_shop_category_matrix_shop_id"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_shop_id.9e4e4a7575", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_shop_category_matrix_shop_id.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_shop_category_matrix_shop_id", "alias": "not_null_mart_shop_category_matrix_shop_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_shop_category_matrix"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_shop_category_matrix_shop_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9347334, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_shop_category_matrix\nwhere shop_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "shop_id", "file_key_name": "models.mart_shop_category_matrix"}, "test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_item_category_id.d23ca9fa39": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_category_id", "model": "{{ get_where_subquery(ref('mart_shop_category_matrix')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_shop_category_matrix"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_shop_category_matrix_item_category_id"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_item_category_id.d23ca9fa39", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_shop_category_matrix_item_category_id.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_shop_category_matrix_item_category_id", "alias": "not_null_mart_shop_category_matrix_item_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_shop_category_matrix"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_shop_category_matrix_item_category_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9360788, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_shop_category_matrix\nwhere item_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_category_id", "file_key_name": "models.mart_shop_category_matrix"}, "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_ID.2a57daace6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHOP_ID", "model": "{{ get_where_subquery(ref('mart_shop_profile')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_shop_profile"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_shop_profile_SHOP_ID"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_ID.2a57daace6", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_shop_profile_SHOP_ID.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_shop_profile_SHOP_ID", "alias": "not_null_mart_shop_profile_SHOP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_shop_profile"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_shop_profile_SHOP_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9374313, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_shop_profile\nwhere SHOP_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SHOP_ID", "file_key_name": "models.mart_shop_profile"}, "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_NAME.ffad43b95f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHOP_NAME", "model": "{{ get_where_subquery(ref('mart_shop_profile')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_shop_profile"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_shop_profile_SHOP_NAME"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_NAME.ffad43b95f", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_shop_profile_SHOP_NAME.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_shop_profile_SHOP_NAME", "alias": "not_null_mart_shop_profile_SHOP_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_shop_profile"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_shop_profile_SHOP_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.938752, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_shop_profile\nwhere SHOP_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SHOP_NAME", "file_key_name": "models.mart_shop_profile"}, "test.dbt_sales_pipeline.not_null_mart_shop_profile_CATEGORY_COUNT.95636ac9d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CATEGORY_COUNT", "model": "{{ get_where_subquery(ref('mart_shop_profile')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_shop_profile"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_shop_profile_CATEGORY_COUNT"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_shop_profile_CATEGORY_COUNT.95636ac9d4", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_shop_profile_CATEGORY_COUNT.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_shop_profile_CATEGORY_COUNT", "alias": "not_null_mart_shop_profile_CATEGORY_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_shop_profile"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_shop_profile_CATEGORY_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9402654, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_shop_profile\nwhere CATEGORY_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CATEGORY_COUNT", "file_key_name": "models.mart_shop_profile"}, "test.dbt_sales_pipeline.not_null_mart_shop_profile_AVG_ITEM_PRICE.31d48e1798": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVG_ITEM_PRICE", "model": "{{ get_where_subquery(ref('mart_shop_profile')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_shop_profile"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_shop_profile_AVG_ITEM_PRICE"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_shop_profile_AVG_ITEM_PRICE.31d48e1798", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_shop_profile_AVG_ITEM_PRICE.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_shop_profile_AVG_ITEM_PRICE", "alias": "not_null_mart_shop_profile_AVG_ITEM_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_shop_profile"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_shop_profile_AVG_ITEM_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.941671, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_shop_profile\nwhere AVG_ITEM_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AVG_ITEM_PRICE", "file_key_name": "models.mart_shop_profile"}, "test.dbt_sales_pipeline.not_null_mart_shop_profile_REVENUE_PER_ITEM.50dcd3500b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REVENUE_PER_ITEM", "model": "{{ get_where_subquery(ref('mart_shop_profile')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_shop_profile"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_shop_profile_REVENUE_PER_ITEM"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_shop_profile_REVENUE_PER_ITEM.50dcd3500b", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_shop_profile_REVENUE_PER_ITEM.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_shop_profile_REVENUE_PER_ITEM", "alias": "not_null_mart_shop_profile_REVENUE_PER_ITEM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_shop_profile"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_shop_profile_REVENUE_PER_ITEM.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9430344, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_shop_profile\nwhere REVENUE_PER_ITEM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "REVENUE_PER_ITEM", "file_key_name": "models.mart_shop_profile"}, "test.dbt_sales_pipeline.not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE.4c34fb1607": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MONTHLY_REVENUE_VARIANCE", "model": "{{ get_where_subquery(ref('mart_shop_profile')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_shop_profile"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE.4c34fb1607", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE", "alias": "not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_shop_profile"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.944586, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_shop_profile\nwhere MONTHLY_REVENUE_VARIANCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MONTHLY_REVENUE_VARIANCE", "file_key_name": "models.mart_shop_profile"}, "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM.9fb8715a2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE_BLOCK_NUM", "model": "{{ get_where_subquery(ref('mart_item_monthly_consistency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_item_monthly_consistency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM.9fb8715a2b", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM", "alias": "not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_item_monthly_consistency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9460156, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_item_monthly_consistency\nwhere DATE_BLOCK_NUM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE_BLOCK_NUM", "file_key_name": "models.mart_item_monthly_consistency"}, "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_ITEM_ID.2e7626eb1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ITEM_ID", "model": "{{ get_where_subquery(ref('mart_item_monthly_consistency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_item_monthly_consistency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_item_monthly_consistency_ITEM_ID"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_ITEM_ID.2e7626eb1b", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_item_monthly_consistency_ITEM_ID.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_item_monthly_consistency_ITEM_ID", "alias": "not_null_mart_item_monthly_consistency_ITEM_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_item_monthly_consistency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_item_monthly_consistency_ITEM_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9474823, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_item_monthly_consistency\nwhere ITEM_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ITEM_ID", "file_key_name": "models.mart_item_monthly_consistency"}, "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_MONTHLY_REVENUE.4eee86dea5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MONTHLY_REVENUE", "model": "{{ get_where_subquery(ref('mart_item_monthly_consistency')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_item_monthly_consistency"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_item_monthly_consistency_MONTHLY_REVENUE"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_MONTHLY_REVENUE.4eee86dea5", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_item_monthly_consistency_MONTHLY_REVENUE.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_item_monthly_consistency_MONTHLY_REVENUE", "alias": "not_null_mart_item_monthly_consistency_MONTHLY_REVENUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_item_monthly_consistency"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_item_monthly_consistency_MONTHLY_REVENUE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.949001, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_item_monthly_consistency\nwhere MONTHLY_REVENUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MONTHLY_REVENUE", "file_key_name": "models.mart_item_monthly_consistency"}, "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID.22ce74e028": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ITEM_CATEGORY_ID", "model": "{{ get_where_subquery(ref('mart_seasonality_by_category')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_seasonality_by_category"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID.22ce74e028", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID", "alias": "not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_seasonality_by_category"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9504745, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_seasonality_by_category\nwhere ITEM_CATEGORY_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ITEM_CATEGORY_ID", "file_key_name": "models.mart_seasonality_by_category"}, "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_MONTH_LABEL.6313d2983d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MONTH_LABEL", "model": "{{ get_where_subquery(ref('mart_seasonality_by_category')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_seasonality_by_category"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_seasonality_by_category_MONTH_LABEL"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_MONTH_LABEL.6313d2983d", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_seasonality_by_category_MONTH_LABEL.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_seasonality_by_category_MONTH_LABEL", "alias": "not_null_mart_seasonality_by_category_MONTH_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_seasonality_by_category"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_seasonality_by_category_MONTH_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9518108, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_seasonality_by_category\nwhere MONTH_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MONTH_LABEL", "file_key_name": "models.mart_seasonality_by_category"}, "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_SEASONALITY_SCORE.e8ab9ef0f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SEASONALITY_SCORE", "model": "{{ get_where_subquery(ref('mart_seasonality_by_category')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_sales_pipeline.mart_seasonality_by_category"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SALES_PIPELINE", "schema": "RAW_dbt_test__audit", "fqn": ["dbt_sales_pipeline", "marts", "not_null_mart_seasonality_by_category_SEASONALITY_SCORE"], "unique_id": "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_SEASONALITY_SCORE.e8ab9ef0f3", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "not_null_mart_seasonality_by_category_SEASONALITY_SCORE.sql", "original_file_path": "models/marts/schema.yml", "name": "not_null_mart_seasonality_by_category_SEASONALITY_SCORE", "alias": "not_null_mart_seasonality_by_category_SEASONALITY_SCORE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["mart_seasonality_by_category"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_sales_pipeline/models/marts/schema.yml/not_null_mart_seasonality_by_category_SEASONALITY_SCORE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1754400432.9533145, "compiled_sql": "\n    \n    \n\nselect *\nfrom SALES_PIPELINE.RAW_marts.mart_seasonality_by_category\nwhere SEASONALITY_SCORE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SEASONALITY_SCORE", "file_key_name": "models.mart_seasonality_by_category"}}, "sources": {"source.dbt_sales_pipeline.raw.sales_train": {"fqn": ["dbt_sales_pipeline", "raw", "sales_train"], "database": "SALES_PIPELINE", "schema": "RAW", "unique_id": "source.dbt_sales_pipeline.raw.sales_train", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "sales_train", "source_name": "raw", "source_description": "", "loader": "", "identifier": "sales_train", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SALES_PIPELINE.RAW.sales_train", "created_at": 1754400432.9542418}, "source.dbt_sales_pipeline.raw.translated_items": {"fqn": ["dbt_sales_pipeline", "raw", "translated_items"], "database": "SALES_PIPELINE", "schema": "RAW", "unique_id": "source.dbt_sales_pipeline.raw.translated_items", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "translated_items", "source_name": "raw", "source_description": "", "loader": "", "identifier": "translated_items", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SALES_PIPELINE.RAW.translated_items", "created_at": 1754400432.9543734}, "source.dbt_sales_pipeline.raw.translated_shops": {"fqn": ["dbt_sales_pipeline", "raw", "translated_shops"], "database": "SALES_PIPELINE", "schema": "RAW", "unique_id": "source.dbt_sales_pipeline.raw.translated_shops", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "translated_shops", "source_name": "raw", "source_description": "", "loader": "", "identifier": "translated_shops", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SALES_PIPELINE.RAW.translated_shops", "created_at": 1754400432.9544435}, "source.dbt_sales_pipeline.raw.translated_item_categories": {"fqn": ["dbt_sales_pipeline", "raw", "translated_item_categories"], "database": "SALES_PIPELINE", "schema": "RAW", "unique_id": "source.dbt_sales_pipeline.raw.translated_item_categories", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "translated_item_categories", "source_name": "raw", "source_description": "", "loader": "", "identifier": "translated_item_categories", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SALES_PIPELINE.RAW.translated_item_categories", "created_at": 1754400432.9545074}}, "macros": {"macro.dbt_sales_pipeline.date_month_from_block_num_dynamic": {"unique_id": "macro.dbt_sales_pipeline.date_month_from_block_num_dynamic", "package_name": "dbt_sales_pipeline", "root_path": "/usr/app", "path": "macros/date_utils.sql", "original_file_path": "macros/date_utils.sql", "name": "date_month_from_block_num_dynamic", "macro_sql": "{% macro date_month_from_block_num_dynamic(date_block_num_col) %}\r\n    TO_CHAR(DATEADD(\r\n        month,\r\n        {{ date_block_num_col }},\r\n        (SELECT BASE_DATE FROM {{ ref('base_date') }})\r\n    ), 'YYYY-MM')\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.4930754}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.4947672}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5073645}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.50782}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5084102}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} \n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    \n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5096233}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5108473}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5115812}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5123317}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5128496}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5129726}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5132163}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5133548}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5135944}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5139415}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5142047}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.514986}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.515255}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5159082}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.51686}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.517968}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.518268}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5185888}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5199256}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5221193}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5225048}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5229137}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5251937}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5283628}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.528902}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5309548}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5317152}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5343883}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5357153}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5374875}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5377545}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5381305}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5383377}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5385218}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5396698}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.540201}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5406444}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5446827}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5490458}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5502198}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.550517}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5511594}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5513499}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5515}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.551702}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5518527}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5524828}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5527751}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5543416}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5555925}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5561187}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5592663}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.560535}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5609639}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5642412}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.565933}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5662653}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5668118}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5671427}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5680192}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5744889}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5760825}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5777535}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5784674}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5792735}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5844965}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.586366}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.588029}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5890021}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5911982}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5957487}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5969288}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5971575}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5973988}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5978599}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5988133}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.5991027}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6001062}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.600359}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6006432}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6012983}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.606243}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6135688}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6148155}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6151836}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.618679}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6190734}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6192982}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6194217}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6196804}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.620923}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.621187}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.621508}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6221225}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6262321}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6265204}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6268854}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6270714}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6271899}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6280754}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6282783}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6284995}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6296363}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6318264}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6346474}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.636003}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6371017}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6374114}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6393049}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.639992}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6403372}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.641412}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6416867}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6427503}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6431012}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6434379}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6443424}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.644675}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6457913}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6467726}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6475964}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.64824}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.65054}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.650757}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6511254}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6513374}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6518419}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.652104}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.652827}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6531246}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.65405}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6553352}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.655561}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.655801}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.655996}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6562967}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.65691}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.658018}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6582942}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.658589}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6591158}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6612074}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6616237}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.66195}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6621454}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.662377}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6626697}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6629784}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6634448}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6636717}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6638587}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6652498}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6654835}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6656768}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.665887}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6670628}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6672363}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6674228}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6678827}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6698663}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6702683}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.670516}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6707704}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6710591}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6712449}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.671469}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.671792}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6720662}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6727147}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6729758}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.673205}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6743624}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.674644}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.6749747}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1754400432.675283}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_sales_pipeline.mart_daily_sales": ["model.dbt_sales_pipeline.stg_sales_train"], "model.dbt_sales_pipeline.mart_item_monthly_consistency": ["model.dbt_sales_pipeline.stg_items", "model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_sales_train"], "model.dbt_sales_pipeline.mart_monthly_sales": [], "model.dbt_sales_pipeline.mart_revenue_by_month": ["model.dbt_sales_pipeline.stg_sales_train"], "model.dbt_sales_pipeline.mart_revenue_by_store": [], "model.dbt_sales_pipeline.mart_seasonality_by_category": ["model.dbt_sales_pipeline.mart_monthly_sales", "model.dbt_sales_pipeline.stg_item_categories", "model.dbt_sales_pipeline.stg_items", "model.dbt_sales_pipeline.stg_sales_train"], "model.dbt_sales_pipeline.mart_shop_category_matrix": ["model.dbt_sales_pipeline.stg_item_categories", "model.dbt_sales_pipeline.stg_items", "model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_shops"], "model.dbt_sales_pipeline.mart_shop_profile": ["model.dbt_sales_pipeline.stg_items", "model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_shops"], "model.dbt_sales_pipeline.mart_top_item_categories": ["model.dbt_sales_pipeline.stg_item_categories", "model.dbt_sales_pipeline.stg_items", "model.dbt_sales_pipeline.stg_sales_train"], "model.dbt_sales_pipeline.mart_top_products": [], "model.dbt_sales_pipeline.mart_top_shops": ["model.dbt_sales_pipeline.stg_sales_train", "model.dbt_sales_pipeline.stg_shops"], "model.dbt_sales_pipeline.mart_total_revenue": ["model.dbt_sales_pipeline.stg_sales_train"], "model.dbt_sales_pipeline.stg_items": ["source.dbt_sales_pipeline.raw.translated_items"], "model.dbt_sales_pipeline.stg_item_categories": ["source.dbt_sales_pipeline.raw.translated_item_categories"], "model.dbt_sales_pipeline.stg_sales_train": ["source.dbt_sales_pipeline.raw.sales_train"], "model.dbt_sales_pipeline.stg_shops": ["source.dbt_sales_pipeline.raw.translated_shops"], "model.dbt_sales_pipeline.base_date": ["model.dbt_sales_pipeline.stg_sales_train"], "test.dbt_sales_pipeline.not_null_stg_sales_train_date.8dbbe923c9": ["model.dbt_sales_pipeline.stg_sales_train"], "test.dbt_sales_pipeline.not_null_stg_sales_train_date_block_num.434ae7f18d": ["model.dbt_sales_pipeline.stg_sales_train"], "test.dbt_sales_pipeline.not_null_stg_sales_train_shop_id.9a549f4831": ["model.dbt_sales_pipeline.stg_sales_train"], "test.dbt_sales_pipeline.not_null_stg_sales_train_item_id.85349643d8": ["model.dbt_sales_pipeline.stg_sales_train"], "test.dbt_sales_pipeline.not_null_stg_sales_train_item_price.857f5a42da": ["model.dbt_sales_pipeline.stg_sales_train"], "test.dbt_sales_pipeline.not_null_stg_sales_train_item_cnt_day.55e375a5c7": ["model.dbt_sales_pipeline.stg_sales_train"], "test.dbt_sales_pipeline.not_null_stg_items_item_id.2983e86e1a": ["model.dbt_sales_pipeline.stg_items"], "test.dbt_sales_pipeline.unique_stg_items_item_id.20a7a48757": ["model.dbt_sales_pipeline.stg_items"], "test.dbt_sales_pipeline.not_null_stg_items_item_name.d5044a8c85": ["model.dbt_sales_pipeline.stg_items"], "test.dbt_sales_pipeline.not_null_stg_shops_shop_id.57fba4b2db": ["model.dbt_sales_pipeline.stg_shops"], "test.dbt_sales_pipeline.unique_stg_shops_shop_id.76719fa9d3": ["model.dbt_sales_pipeline.stg_shops"], "test.dbt_sales_pipeline.not_null_stg_shops_shop_name.9a24728aef": ["model.dbt_sales_pipeline.stg_shops"], "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_id.7a34a016c6": ["model.dbt_sales_pipeline.stg_item_categories"], "test.dbt_sales_pipeline.unique_stg_item_categories_item_category_id.93e4d17e96": ["model.dbt_sales_pipeline.stg_item_categories"], "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_name.b180d231b8": ["model.dbt_sales_pipeline.stg_item_categories"], "test.dbt_sales_pipeline.not_null_mart_daily_sales_date.1ea3355861": ["model.dbt_sales_pipeline.mart_daily_sales"], "test.dbt_sales_pipeline.not_null_mart_daily_sales_shop_id.ed61a04c50": ["model.dbt_sales_pipeline.mart_daily_sales"], "test.dbt_sales_pipeline.not_null_mart_daily_sales_item_id.2d2aa8161f": ["model.dbt_sales_pipeline.mart_daily_sales"], "test.dbt_sales_pipeline.not_null_mart_monthly_sales_date_block_num.c05d4ef562": ["model.dbt_sales_pipeline.mart_monthly_sales"], "test.dbt_sales_pipeline.not_null_mart_monthly_sales_shop_id.b19f0e419a": ["model.dbt_sales_pipeline.mart_monthly_sales"], "test.dbt_sales_pipeline.not_null_mart_monthly_sales_item_id.4e105c8eb8": ["model.dbt_sales_pipeline.mart_monthly_sales"], "test.dbt_sales_pipeline.not_null_mart_total_revenue_total_revenue.207dd0bbe6": ["model.dbt_sales_pipeline.mart_total_revenue"], "test.dbt_sales_pipeline.not_null_mart_revenue_by_month_date_block_num.dc35a0bd5f": ["model.dbt_sales_pipeline.mart_revenue_by_month"], "test.dbt_sales_pipeline.not_null_mart_revenue_by_month_monthly_revenue.7b84e90f1b": ["model.dbt_sales_pipeline.mart_revenue_by_month"], "test.dbt_sales_pipeline.not_null_mart_top_shops_shop_id.5f28a1ac83": ["model.dbt_sales_pipeline.mart_top_shops"], "test.dbt_sales_pipeline.not_null_mart_top_shops_total_revenue.8061af0001": ["model.dbt_sales_pipeline.mart_top_shops"], "test.dbt_sales_pipeline.not_null_mart_top_item_categories_item_category_id.662c4872fb": ["model.dbt_sales_pipeline.mart_top_item_categories"], "test.dbt_sales_pipeline.not_null_mart_top_item_categories_total_revenue.2e4999a765": ["model.dbt_sales_pipeline.mart_top_item_categories"], "test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_shop_id.9e4e4a7575": ["model.dbt_sales_pipeline.mart_shop_category_matrix"], "test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_item_category_id.d23ca9fa39": ["model.dbt_sales_pipeline.mart_shop_category_matrix"], "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_ID.2a57daace6": ["model.dbt_sales_pipeline.mart_shop_profile"], "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_NAME.ffad43b95f": ["model.dbt_sales_pipeline.mart_shop_profile"], "test.dbt_sales_pipeline.not_null_mart_shop_profile_CATEGORY_COUNT.95636ac9d4": ["model.dbt_sales_pipeline.mart_shop_profile"], "test.dbt_sales_pipeline.not_null_mart_shop_profile_AVG_ITEM_PRICE.31d48e1798": ["model.dbt_sales_pipeline.mart_shop_profile"], "test.dbt_sales_pipeline.not_null_mart_shop_profile_REVENUE_PER_ITEM.50dcd3500b": ["model.dbt_sales_pipeline.mart_shop_profile"], "test.dbt_sales_pipeline.not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE.4c34fb1607": ["model.dbt_sales_pipeline.mart_shop_profile"], "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM.9fb8715a2b": ["model.dbt_sales_pipeline.mart_item_monthly_consistency"], "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_ITEM_ID.2e7626eb1b": ["model.dbt_sales_pipeline.mart_item_monthly_consistency"], "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_MONTHLY_REVENUE.4eee86dea5": ["model.dbt_sales_pipeline.mart_item_monthly_consistency"], "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID.22ce74e028": ["model.dbt_sales_pipeline.mart_seasonality_by_category"], "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_MONTH_LABEL.6313d2983d": ["model.dbt_sales_pipeline.mart_seasonality_by_category"], "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_SEASONALITY_SCORE.e8ab9ef0f3": ["model.dbt_sales_pipeline.mart_seasonality_by_category"], "source.dbt_sales_pipeline.raw.sales_train": [], "source.dbt_sales_pipeline.raw.translated_items": [], "source.dbt_sales_pipeline.raw.translated_shops": [], "source.dbt_sales_pipeline.raw.translated_item_categories": []}, "child_map": {"model.dbt_sales_pipeline.mart_daily_sales": ["test.dbt_sales_pipeline.not_null_mart_daily_sales_date.1ea3355861", "test.dbt_sales_pipeline.not_null_mart_daily_sales_item_id.2d2aa8161f", "test.dbt_sales_pipeline.not_null_mart_daily_sales_shop_id.ed61a04c50"], "model.dbt_sales_pipeline.mart_item_monthly_consistency": ["test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM.9fb8715a2b", "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_ITEM_ID.2e7626eb1b", "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_MONTHLY_REVENUE.4eee86dea5"], "model.dbt_sales_pipeline.mart_monthly_sales": ["model.dbt_sales_pipeline.mart_seasonality_by_category", "test.dbt_sales_pipeline.not_null_mart_monthly_sales_date_block_num.c05d4ef562", "test.dbt_sales_pipeline.not_null_mart_monthly_sales_item_id.4e105c8eb8", "test.dbt_sales_pipeline.not_null_mart_monthly_sales_shop_id.b19f0e419a"], "model.dbt_sales_pipeline.mart_revenue_by_month": ["test.dbt_sales_pipeline.not_null_mart_revenue_by_month_date_block_num.dc35a0bd5f", "test.dbt_sales_pipeline.not_null_mart_revenue_by_month_monthly_revenue.7b84e90f1b"], "model.dbt_sales_pipeline.mart_revenue_by_store": [], "model.dbt_sales_pipeline.mart_seasonality_by_category": ["test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID.22ce74e028", "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_MONTH_LABEL.6313d2983d", "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_SEASONALITY_SCORE.e8ab9ef0f3"], "model.dbt_sales_pipeline.mart_shop_category_matrix": ["test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_item_category_id.d23ca9fa39", "test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_shop_id.9e4e4a7575"], "model.dbt_sales_pipeline.mart_shop_profile": ["test.dbt_sales_pipeline.not_null_mart_shop_profile_AVG_ITEM_PRICE.31d48e1798", "test.dbt_sales_pipeline.not_null_mart_shop_profile_CATEGORY_COUNT.95636ac9d4", "test.dbt_sales_pipeline.not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE.4c34fb1607", "test.dbt_sales_pipeline.not_null_mart_shop_profile_REVENUE_PER_ITEM.50dcd3500b", "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_ID.2a57daace6", "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_NAME.ffad43b95f"], "model.dbt_sales_pipeline.mart_top_item_categories": ["test.dbt_sales_pipeline.not_null_mart_top_item_categories_item_category_id.662c4872fb", "test.dbt_sales_pipeline.not_null_mart_top_item_categories_total_revenue.2e4999a765"], "model.dbt_sales_pipeline.mart_top_products": [], "model.dbt_sales_pipeline.mart_top_shops": ["test.dbt_sales_pipeline.not_null_mart_top_shops_shop_id.5f28a1ac83", "test.dbt_sales_pipeline.not_null_mart_top_shops_total_revenue.8061af0001"], "model.dbt_sales_pipeline.mart_total_revenue": ["test.dbt_sales_pipeline.not_null_mart_total_revenue_total_revenue.207dd0bbe6"], "model.dbt_sales_pipeline.stg_items": ["model.dbt_sales_pipeline.mart_item_monthly_consistency", "model.dbt_sales_pipeline.mart_seasonality_by_category", "model.dbt_sales_pipeline.mart_shop_category_matrix", "model.dbt_sales_pipeline.mart_shop_profile", "model.dbt_sales_pipeline.mart_top_item_categories", "test.dbt_sales_pipeline.not_null_stg_items_item_id.2983e86e1a", "test.dbt_sales_pipeline.not_null_stg_items_item_name.d5044a8c85", "test.dbt_sales_pipeline.unique_stg_items_item_id.20a7a48757"], "model.dbt_sales_pipeline.stg_item_categories": ["model.dbt_sales_pipeline.mart_seasonality_by_category", "model.dbt_sales_pipeline.mart_shop_category_matrix", "model.dbt_sales_pipeline.mart_top_item_categories", "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_id.7a34a016c6", "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_name.b180d231b8", "test.dbt_sales_pipeline.unique_stg_item_categories_item_category_id.93e4d17e96"], "model.dbt_sales_pipeline.stg_sales_train": ["model.dbt_sales_pipeline.base_date", "model.dbt_sales_pipeline.mart_daily_sales", "model.dbt_sales_pipeline.mart_item_monthly_consistency", "model.dbt_sales_pipeline.mart_item_monthly_consistency", "model.dbt_sales_pipeline.mart_revenue_by_month", "model.dbt_sales_pipeline.mart_seasonality_by_category", "model.dbt_sales_pipeline.mart_shop_category_matrix", "model.dbt_sales_pipeline.mart_shop_profile", "model.dbt_sales_pipeline.mart_shop_profile", "model.dbt_sales_pipeline.mart_top_item_categories", "model.dbt_sales_pipeline.mart_top_shops", "model.dbt_sales_pipeline.mart_total_revenue", "test.dbt_sales_pipeline.not_null_stg_sales_train_date.8dbbe923c9", "test.dbt_sales_pipeline.not_null_stg_sales_train_date_block_num.434ae7f18d", "test.dbt_sales_pipeline.not_null_stg_sales_train_item_cnt_day.55e375a5c7", "test.dbt_sales_pipeline.not_null_stg_sales_train_item_id.85349643d8", "test.dbt_sales_pipeline.not_null_stg_sales_train_item_price.857f5a42da", "test.dbt_sales_pipeline.not_null_stg_sales_train_shop_id.9a549f4831"], "model.dbt_sales_pipeline.stg_shops": ["model.dbt_sales_pipeline.mart_shop_category_matrix", "model.dbt_sales_pipeline.mart_shop_profile", "model.dbt_sales_pipeline.mart_top_shops", "test.dbt_sales_pipeline.not_null_stg_shops_shop_id.57fba4b2db", "test.dbt_sales_pipeline.not_null_stg_shops_shop_name.9a24728aef", "test.dbt_sales_pipeline.unique_stg_shops_shop_id.76719fa9d3"], "model.dbt_sales_pipeline.base_date": [], "test.dbt_sales_pipeline.not_null_stg_sales_train_date.8dbbe923c9": [], "test.dbt_sales_pipeline.not_null_stg_sales_train_date_block_num.434ae7f18d": [], "test.dbt_sales_pipeline.not_null_stg_sales_train_shop_id.9a549f4831": [], "test.dbt_sales_pipeline.not_null_stg_sales_train_item_id.85349643d8": [], "test.dbt_sales_pipeline.not_null_stg_sales_train_item_price.857f5a42da": [], "test.dbt_sales_pipeline.not_null_stg_sales_train_item_cnt_day.55e375a5c7": [], "test.dbt_sales_pipeline.not_null_stg_items_item_id.2983e86e1a": [], "test.dbt_sales_pipeline.unique_stg_items_item_id.20a7a48757": [], "test.dbt_sales_pipeline.not_null_stg_items_item_name.d5044a8c85": [], "test.dbt_sales_pipeline.not_null_stg_shops_shop_id.57fba4b2db": [], "test.dbt_sales_pipeline.unique_stg_shops_shop_id.76719fa9d3": [], "test.dbt_sales_pipeline.not_null_stg_shops_shop_name.9a24728aef": [], "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_id.7a34a016c6": [], "test.dbt_sales_pipeline.unique_stg_item_categories_item_category_id.93e4d17e96": [], "test.dbt_sales_pipeline.not_null_stg_item_categories_item_category_name.b180d231b8": [], "test.dbt_sales_pipeline.not_null_mart_daily_sales_date.1ea3355861": [], "test.dbt_sales_pipeline.not_null_mart_daily_sales_shop_id.ed61a04c50": [], "test.dbt_sales_pipeline.not_null_mart_daily_sales_item_id.2d2aa8161f": [], "test.dbt_sales_pipeline.not_null_mart_monthly_sales_date_block_num.c05d4ef562": [], "test.dbt_sales_pipeline.not_null_mart_monthly_sales_shop_id.b19f0e419a": [], "test.dbt_sales_pipeline.not_null_mart_monthly_sales_item_id.4e105c8eb8": [], "test.dbt_sales_pipeline.not_null_mart_total_revenue_total_revenue.207dd0bbe6": [], "test.dbt_sales_pipeline.not_null_mart_revenue_by_month_date_block_num.dc35a0bd5f": [], "test.dbt_sales_pipeline.not_null_mart_revenue_by_month_monthly_revenue.7b84e90f1b": [], "test.dbt_sales_pipeline.not_null_mart_top_shops_shop_id.5f28a1ac83": [], "test.dbt_sales_pipeline.not_null_mart_top_shops_total_revenue.8061af0001": [], "test.dbt_sales_pipeline.not_null_mart_top_item_categories_item_category_id.662c4872fb": [], "test.dbt_sales_pipeline.not_null_mart_top_item_categories_total_revenue.2e4999a765": [], "test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_shop_id.9e4e4a7575": [], "test.dbt_sales_pipeline.not_null_mart_shop_category_matrix_item_category_id.d23ca9fa39": [], "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_ID.2a57daace6": [], "test.dbt_sales_pipeline.not_null_mart_shop_profile_SHOP_NAME.ffad43b95f": [], "test.dbt_sales_pipeline.not_null_mart_shop_profile_CATEGORY_COUNT.95636ac9d4": [], "test.dbt_sales_pipeline.not_null_mart_shop_profile_AVG_ITEM_PRICE.31d48e1798": [], "test.dbt_sales_pipeline.not_null_mart_shop_profile_REVENUE_PER_ITEM.50dcd3500b": [], "test.dbt_sales_pipeline.not_null_mart_shop_profile_MONTHLY_REVENUE_VARIANCE.4c34fb1607": [], "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_DATE_BLOCK_NUM.9fb8715a2b": [], "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_ITEM_ID.2e7626eb1b": [], "test.dbt_sales_pipeline.not_null_mart_item_monthly_consistency_MONTHLY_REVENUE.4eee86dea5": [], "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_ITEM_CATEGORY_ID.22ce74e028": [], "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_MONTH_LABEL.6313d2983d": [], "test.dbt_sales_pipeline.not_null_mart_seasonality_by_category_SEASONALITY_SCORE.e8ab9ef0f3": [], "source.dbt_sales_pipeline.raw.sales_train": ["model.dbt_sales_pipeline.stg_sales_train"], "source.dbt_sales_pipeline.raw.translated_items": ["model.dbt_sales_pipeline.stg_items"], "source.dbt_sales_pipeline.raw.translated_shops": ["model.dbt_sales_pipeline.stg_shops"], "source.dbt_sales_pipeline.raw.translated_item_categories": ["model.dbt_sales_pipeline.stg_item_categories"]}}